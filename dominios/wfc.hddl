(define (domain wfc)
    (:requirements :hierarchy)

    (:types tile location direction - object)

    (:constants de dd dc db - direction)

    (:predicates (empty ?x ?y - location)
                 (connect ?t1 ?t2 - tile ?d - direction)
                 (possible ?x ?y - location ?t - tile)
                 (inc ?a ?b - location)
    )

    (:task buildmapabstract :parameters (?x ?y - location))
    (:task buildtileabstract :parameters (?x ?y - location))
    (:task updatetileabstract :parameters (?x ?y - location ?t - tile ?d - direction))

    (:method build-map-place-1
        :parameters (?x ?y - location)
        :task (buildmapabstract ?x ?y)
        :precondition (empty ?x ?y)
        :ordered-subtasks (and
            (buildtileabstract ?x ?y)
            (buildmapabstract ?x ?y)
        )
    )

    (:method build-map-neighbor-1
        :parameters (?x ?y ?w - location)
        :task (buildmapabstract ?x ?y)
        :precondition (and
            (not (empty ?x ?y))
            (or (inc ?x ?w) (inc ?w ?x))
            (empty ?w ?y)
        )
        :ordered-subtasks (and
            (buildtileabstract ?w ?y)
            (buildmapabstract ?x ?y)
            (buildmapabstract ?w ?y)
        )
    )

    (:method build-map-neighbor-2
        :parameters (?x ?y ?w - location)
        :task (buildmapabstract ?x ?y)
        :precondition (and
            (not (empty ?x ?y))
            (or (inc ?y ?w) (inc ?w ?y))
            (empty ?x ?w)
        )
        :ordered-subtasks (and
            (buildtileabstract ?x ?w)
            (buildmapabstract ?x ?y)
            (buildmapabstract ?x ?w)
        )
    )

    (:method build-map-stop-1
        :parameters (?x ?y ?w - location)
        :task (buildmapabstract ?x ?y)
        :precondition (and
            (not (empty ?x ?y))
            (or
                (and (or (inc ?y ?w) (inc ?w ?y)) (not (empty ?x ?w)))
                (and (or (inc ?x ?w) (inc ?w ?x)) (not (empty ?w ?y)))
            )
        )
        :subtasks ()
    )

    (:method build-tile-1
        :parameters (?x ?y - location ?t - tile)
        :task (buildtileabstract ?x ?y)
        :precondition (possible ?x ?y ?t)
        :ordered-subtasks (and
            (placetile ?x ?y ?t)
            (updatetileabstract ?x ?y ?t de)
            (updatetileabstract ?x ?y ?t dd)
            (updatetileabstract ?x ?y ?t db)
            (updatetileabstract ?x ?y ?t dc)
        )
    )

    (:method update-tiles-dummy
        :parameters (?x ?y ?w - location ?t - tile ?d - direction)
        :task (updatetileabstract ?x ?y ?t ?d)
        :precondition (and
            (not (and (inc ?w ?y) (= ?d de)))
            (not (and (inc ?y ?w) (= ?d dd)))
            (not (and (inc ?w ?x) (= ?d dc)))
            (not (and (inc ?x ?w) (= ?d db)))
        )
        :subtasks ()
    )

    (:method update-tiles-1
        :parameters (?x ?y ?w - location ?t - tile ?d - direction)
        :task (updatetileabstract ?x ?y ?t ?d)
        :precondition (and (inc ?w ?y) (= ?d de))
        :subtasks (and
            (updatetile ?x ?w ?t ?d)
        )
    )

    (:method update-tiles-2
        :parameters (?x ?y ?w - location ?t - tile ?d - direction)
        :task (updatetileabstract ?x ?y ?t ?d)
        :precondition (and (inc ?y ?w) (= ?d dd))
        :subtasks (and
            (updatetile ?x ?w ?t ?d)
        )
    )

    (:method update-tiles-3
        :parameters (?x ?y ?w - location ?t - tile ?d - direction)
        :task (updatetileabstract ?x ?y ?t ?d)
        :precondition (and (inc ?w ?x) (= ?d dc))
        :subtasks (and
            (updatetile ?w ?y ?t ?d)
        )
    )

    (:method update-tiles-4
        :parameters (?x ?y ?w - location ?t - tile ?d - direction)
        :task (updatetileabstract ?x ?y ?t ?d)
        :precondition (and (inc ?x ?w) (= ?d db))
        :subtasks (and
            (updatetile ?w ?y ?t ?d)
        )
    )

    (:action placetile
        :parameters (?x ?y - location ?t - tile)
        :precondition ()
        :effect (not (empty ?x ?y))
    ) 

    (:action updatetile
        :parameters (?x ?y - location ?t - tile ?d - direction)
        :precondition ()
        :effect (forall
            (?tt - tile)
            (when
                (and (possible ?x ?y ?tt) (not (connect ?tt ?t ?d)))
                (not (possible ?x ?y ?tt))
            )
        )
    )
)
